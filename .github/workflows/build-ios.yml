name: Build MAUI App

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-ios-android:
    runs-on: macos-latest
    env:
      DOTNET_ROOT: /Users/runner/.dotnet

    steps:
      # 1. Checkout the repository
      - name: Checkout repo
        uses: actions/checkout@v4
      # Decode and save the P12
      - name: Decode .p12 from secret
        run: |
          echo "Base64 from secret:"

          printf "%s" "${{ secrets.IOS_P12_BASE64 }}" | tr -d '\r\n' | base64 --decode > ios_distribution.p12
          openssl pkcs12 -in ios_distribution.p12 -nokeys -passin pass:"${{ secrets.IOS_P12_PASSWORD }}"

          printf "%s" "${{ secrets.IOS_TEST_SECRET }}" | tr -d '\r\n' | base64 --decode > ios_test.p12
          openssl pkcs12 -in ios_test.p12 -nokeys -passin pass:"${{ secrets.IOS_P12_PASSWORD }}"

          printf "%s" "${{ secrets.IOS_PROVISION_BASE64 }}" | tr -d '\r\n' | base64 --decode > ios_provisions.txt
          #openssl pkcs12 -in ios_provisions.txt -nokeys -passin pass:"${{ secrets.IOS_P12_PASSWORD }}"

          RUNNER_SHA=$(shasum -a 256 ios_distribution.p12 | awk '{print $1}')
          echo "Runner SHA256: $RUNNER_SHA"

          if [ "$RUNNER_SHA" != "${{ secrets.IOS_P12_SHA256 }}" ]; then
            echo "ERROR: Decoded P12 checksum does not match original!"
          fi

          RUNNER_SHA=$(shasum -a 256 ios_test.p12 | awk '{print $1}')
          echo "Runner SHA256: $RUNNER_SHA"

          if [ "$RUNNER_SHA" != "${{ secrets.IOS_TEST_SHA256 }}" ]; then
            echo "ERROR: Decoded P12 Test checksum does not match original!"
          fi

          RUNNER_SHA=$(shasum -a 256 ios_provisions.txt | awk '{print $1}')
          echo "Runner SHA256: $RUNNER_SHA"

          if [ "$RUNNER_SHA" != "${{ secrets.IOS_PROVISIONS_SHA256 }}" ]; then
            echo "ERROR: Decoded P12 Provisions checksum does not match original!"
          fi

      - name: Save decoded Base64 to file
        run: |
          base64 -i ios_distribution.p12 > decoded_p12.txt
          base64 -i ios_test.p12 > decoded_test_p12.txt
          base64 -i ios_provisions.txt > decoded_provisions.txt

      - name: Upload decoded Base64 artifact
        uses: actions/upload-artifact@v4
        with:
          name: ios-test-p12
          path: decoded_test_p12.txt

      - name: Upload decoded Base64 artifact
        uses: actions/upload-artifact@v4
        with:
          name: ios-distribution-p12
          path: decoded_p12.txt

      - name: Upload decoded Base64 artifact
        uses: actions/upload-artifact@v4
        with:
          name: ios-provisions
          path: decoded_provisions.txt

      # Debug password length
      - name: Debug password length
        run: |
          echo "Password length: ${#IOS_P12_PASSWORD}"
        env:
          IOS_P12_PASSWORD: ${{ secrets.IOS_P12_PASSWORD }}

      # Create and unlock keychain
      - name: Create and unlock keychain
        run: |

          openssl pkcs12 -in ios_distribution.p12 -nokeys -passin pass:"$IOS_P12_PASSWORD"
          #openssl pkcs12 -in ios_distribution.p12 -nokeys -passin pass:

          # Full path to keychain
          KEYCHAIN=/Users/runner/Library/Keychains/build.keychain-db

          # Create keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN"

          # Unlock keychain
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN"

          security list-keychains -s "$KEYCHAIN" /Users/runner/Library/Keychains/login.keychain-db $(security list-keychains | tr -d '"')

          # Set settings
          security set-keychain-settings -t 3600 -l "$KEYCHAIN"

          # Add to search path
          security list-keychains -s "$KEYCHAIN" $(security list-keychains | tr -d '"')

          # Verify info
          security show-keychain-info "$KEYCHAIN"

          # Import P12
          set -x
          security import ios_distribution.p12 \
            -k /Users/runner/Library/Keychains/login.keychain-db \
            -P "$IOS_P12_PASSWORD" \
            -T /usr/bin/codesign \
             set +x
          #security import ios_distribution.p12 \
          #  -k "$KEYCHAIN" \
          #  -P "$IOS_P12_PASSWORD" \
          #  -A \
          #  -T /usr/bin/codesign

        env:
          KEYCHAIN_PASSWORD: "buildpass123"
          IOS_P12_PASSWORD: ${{ secrets.IOS_P12_PASSWORD }}


      # 2. Setup .NET 9
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 9.0.x

      # 3. Install MAUI workloads (needed for iOS/Android builds)
      - name: Install MAUI workloads
        run: |
          dotnet workload install maui-ios
          dotnet workload install maui-android

      # 4. Restore NuGet packages for iOS and Android projects
      - name: Restore NuGet packages (iOS)
        run: dotnet restore EdinPopfest/EdinPopfest.iOS/EdinPopfest.iOS.csproj

      - name: Restore NuGet packages (Android)
        run: dotnet restore EdinPopfest/EdinPopfest.Droid/EdinPopfest.Droid.csproj

      # Decode and save certificate & provisioning profile
      - name: Set up signing
        run: |
          echo "${{ secrets.IOS_P12_BASE64 }}" | base64 --decode > ios_distribution.p12
          echo "${{ secrets.IOS_PROVISION_BASE64 }}" | base64 --decode > ios_profile.mobileprovision

      - name: Import certificate into keychain
        run: |
          security create-keychain -p "" build.keychain
          security import ios_distribution.p12 -k ~/Library/Keychains/build.keychain -P "${{ secrets.IOS_P12_PASSWORD }}" -T /usr/bin/codesign
          security list-keychains -s ~/Library/Keychains/build.keychain
          security unlock-keychain -p "" ~/Library/Keychains/build.keychain
          security set-keychain-settings -t 3600 -l ~/Library/Keychains/build.keychain

      # 6. Build iOS project (unsigned IPA)
      - name: Build iOS project
        run: |
          dotnet publish EdinPopfest/EdinPopfest.iOS/EdinPopfest.iOS.csproj \
            -f net9.0-ios -c Release \
            /p:BuildIpa=true \
            /p:MtouchLink=SdkOnly \
            /p:CodesignKey="Apple Distribution: Marc Armstrong (XVHZQ55ZBQ)" \
            /p:CodesignKeyPassword="${{ secrets.EDINPOPFEST }}"
            /p:ProvisioningProfile="ios_profile.mobileprovision"

      # 7. Upload IPA artifact
      - name: Upload IPA artifact
        uses: actions/upload-artifact@v4
        with:
          name: EdinPopfest-ipa
          path: EdinPopfest/EdinPopfest.iOS/bin/Release/net9.0-ios/ios-arm64/*.ipa

      # 5. Build Android project
      - name: Build Android project
        run: dotnet build EdinPopfest/EdinPopfest.Droid/EdinPopfest.Droid.csproj -f net9.0-android35.0 -c Release
